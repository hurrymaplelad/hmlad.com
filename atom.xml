<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hurry Maple Lad</title>
  <link href="http://hurrymaplelad.com/atom.xml" rel="self"/>
  <link href="http://hurrymaplelad.com"/>
  <updated>2013-05-29T07:45:11.757Z</updated>
  <id>http://hurrymaplelad.com/</id>
  <author>
    <name>Adam Hull</name>
  </author>

  
    <entry>
      <title>Ids in Mongoose, JSON, and Backbone</title>
      <link href="http://hurrymaplelad.com/ids-in-mongoose-json-and-backbone/"/>
      <updated>2013-04-02T00:00:00.000Z</updated>
      <id>http://hurrymaplelad.com/ids-in-mongoose-json-and-backbone/</id>
      <content type="html">
        &lt;p&gt;Mongoose adds &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#id&quot;&gt;id sugar&lt;/a&gt; on top the default _id document attribute.  Backbone has &lt;a href=&quot;http://backbonejs.org/#Model-idAttribute&quot;&gt;similar sugar&lt;/a&gt;, but the types don&amp;#39;t line up.  Pushing bits between the two with a customary JSON document adds a third representation.&lt;/p&gt;
&lt;p&gt;If you find yourself typing &lt;code&gt;vegetable.id&lt;/code&gt; when you really needed &lt;code&gt;new ObjectID(vegetable.toJSON()._id)&lt;/code&gt; this fancy chart might help:
&lt;!-- more --&gt;&lt;/p&gt;
&lt;table class=&quot;ids&quot;&gt;
  &lt;tr&gt;&lt;th&gt;Mongoose&lt;/th&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;_id&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://mongoosejs.com/docs/api.html#document_Document-id&quot;&gt;document&lt;/a&gt;&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;ObjectID&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://mongoosejs.com/docs/api.html#query_Query-lean&quot;&gt;lean document&lt;/a&gt;&lt;/td&gt;&lt;td&gt;∅&lt;/td&gt;&lt;td&gt;ObjectID&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://mongoosejs.com/docs/api.html#document_Document-toJSON&quot;&gt;document.toJSON()&lt;/a&gt;&lt;/td&gt;&lt;td&gt;∅&lt;/td&gt;&lt;td&gt;ObjectID&lt;/td&gt;&lt;/tr&gt;

  &lt;tr&gt;&lt;th&gt;JSON&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://www.json.org/&quot;&gt;object&lt;/a&gt;&lt;/td&gt;&lt;td&gt;∅&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;/tr&gt;

  &lt;tr&gt;&lt;th&gt;Backbone&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://backbonejs.org/#Model-id&quot;&gt;model&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;∅&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;http://backbonejs.org/#Model-get&quot;&gt;model.get()&lt;/td&gt;&lt;td&gt;∅&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
      </content>
    </entry>
  
    <entry>
      <title>A Breakthrough a Day</title>
      <link href="http://hurrymaplelad.com/a-breakthrough-a-day/"/>
      <updated>2013-02-18T00:00:00.000Z</updated>
      <id>http://hurrymaplelad.com/a-breakthrough-a-day/</id>
      <content type="html">
        &lt;blockquote&gt;
&lt;p&gt;A breakthrough a day keeps the crisis at bay.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;E. F. Schumacher&lt;br&gt;
&lt;a href=&quot;http://www.goodreads.com/book/show/1117634.Small_Is_Beautiful&quot;&gt;Small is Beautiful&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

      </content>
    </entry>
  
    <entry>
      <title>Restructuring Assignment in CoffeeScript</title>
      <link href="http://hurrymaplelad.com/restructuring-assignment-in-coffeescript/"/>
      <updated>2013-02-12T00:00:00.000Z</updated>
      <id>http://hurrymaplelad.com/restructuring-assignment-in-coffeescript/</id>
      <content type="html">
        &lt;p&gt;CoffeeScript can save as many keystrokes putting objects together as it can taking them apart. You won’t find this one in the docs.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;Sure &lt;a href=&quot;http://blog.carbonfive.com/2011/09/28/destructuring-assignment-in-coffeescript/&quot;&gt;C5 told you all about&lt;/a&gt; CoffeeScript’s &lt;a href=&quot;http://coffeescript.org/#destructuring&quot;&gt;destructing assignment&lt;/a&gt; syntax for objects…&lt;/p&gt;
&lt;p&gt;How it can reach deep into nested structures&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;coffee&amp;gt; user = name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, address: { city: &lt;span class=&quot;string&quot;&gt;'Anytown'&lt;/span&gt;, state:
&lt;span class=&quot;string&quot;&gt;'AL'&lt;/span&gt; }
{ name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, address: { city: &lt;span class=&quot;string&quot;&gt;'Anytown'&lt;/span&gt;, state: &lt;span class=&quot;string&quot;&gt;'AL'&lt;/span&gt; } }

coffee&amp;gt; { address: { city, state } } = user
{ name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, address: { city: &lt;span class=&quot;string&quot;&gt;'Anytown'&lt;/span&gt;, state: &lt;span class=&quot;string&quot;&gt;'AL'&lt;/span&gt; } }

coffee&amp;gt; city
&lt;span class=&quot;string&quot;&gt;'Anytown'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or pluck apart function arguments&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;displayName&lt;/span&gt;&lt;/span&gt; = ({ name, age }) -&amp;gt;
  console.log &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{name}&lt;/span&gt;, &lt;span class=&quot;subst&quot;&gt;#{age}&lt;/span&gt; year(s) old&quot;&lt;/span&gt;

coffee&amp;gt; displayName name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;
Foo, &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; year(s) old&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even destructure directly to instance attributes&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;
  constructor: ({ &lt;span class=&quot;property&quot;&gt;@name&lt;/span&gt;, &lt;span class=&quot;property&quot;&gt;@age&lt;/span&gt; }) -&amp;gt;

coffee&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)
{ name: &lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what does this do?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;coffee&amp;gt; age = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; 

coffee&amp;gt; user = { &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age }
?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My fudge-fingers managed to mash that one unknowingly into my editor one day while attempting to rack up velocity points on the latest story. Instead of hemorrhaging the expected SyntaxError, it evaluated to this beautiful new object&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;{ Foo: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I’ve got a handy set syntax&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;coffee&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; { &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; }
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;

coffee&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; { &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; }
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with consistent variable naming, breezy data marshaling between some framework actors&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;
  constructor: ({ &lt;span class=&quot;property&quot;&gt;@name&lt;/span&gt;, &lt;span class=&quot;property&quot;&gt;@age&lt;/span&gt; }) -&amp;gt;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;template&lt;/span&gt;&lt;/span&gt; = ({ user, face }) -&amp;gt;
  &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div&amp;gt;&lt;span class=&quot;subst&quot;&gt;#{user.name}&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;#{face}&lt;/span&gt;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserView&lt;/span&gt; &lt;/span&gt;
  constructor: ({ &lt;span class=&quot;property&quot;&gt;@user&lt;/span&gt; }) -&amp;gt;

  render: -&amp;gt;
    &lt;span class=&quot;property&quot;&gt;@html&lt;/span&gt; = template { 
      &lt;span class=&quot;property&quot;&gt;@user&lt;/span&gt; 
      face: &lt;span class=&quot;string&quot;&gt;':)'&lt;/span&gt;
    }

coffee&amp;gt; user = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User(name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)
{ name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; }

coffee&amp;gt; view = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UserView {user}
{ user: { name: &lt;span class=&quot;string&quot;&gt;'Foo'&lt;/span&gt;, age: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; } }

coffee&amp;gt; view.render()
&lt;span class=&quot;string&quot;&gt;'&amp;lt;div&amp;gt;Foo :)&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

      </content>
    </entry>
  
    <entry>
      <title>Teacup Released</title>
      <link href="http://hurrymaplelad.com/teacup-released/"/>
      <updated>2013-01-09T00:00:00.000Z</updated>
      <id>http://hurrymaplelad.com/teacup-released/</id>
      <content type="html">
        &lt;p&gt;&lt;img src=&quot;https://raw.github.com/goodeggs/teacup/master/docs/teacup.jpg&quot; alt=&quot;Teacup&quot;&gt;&lt;/p&gt;
&lt;p&gt;CoffeeScript templating from the Good Eggs labs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bytes.goodeggs.com/post/40042760798/teacup-coffeescript-templates-for-developer-happiness&quot;&gt;Intro Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://goodeggs.github.com/teacup/&quot;&gt;Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/goodeggs/teacup/&quot;&gt;Source on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </content>
    </entry>
  
    <entry>
      <title>How to Remove a Property from a Mongoose.js Schema</title>
      <link href="http://hurrymaplelad.com/removing-a-property-from-a-mongoose-schema/"/>
      <updated>2012-11-03T00:00:00.000Z</updated>
      <id>http://hurrymaplelad.com/removing-a-property-from-a-mongoose-schema/</id>
      <content type="html">
        &lt;p&gt;This should be simple, but Mongoose really clings to data in existing documents.  I&amp;#39;ll walk through all the ways I wanted it to work that failed.  We&amp;#39;ll remove an &lt;code&gt;organic&lt;/code&gt; flag from a toy &lt;code&gt;Food&lt;/code&gt; model so we can replace it with &lt;a href=&quot;http://www.nytimes.com/2012/10/14/opinion/sunday/bittman-my-dream-food-label.html&quot;&gt;Bittman&amp;#39;s dream label&lt;/a&gt;.  If you just came for the solution, I arrived at:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Food.collection.update({}, 
  {$unset: {organic: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}}, 
  {multi: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, safe: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- more --&gt;Our well-loved &lt;code&gt;Food&lt;/code&gt; schema might look something like:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Food = db.model(&lt;span class=&quot;string&quot;&gt;'Food'&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mongoose.Schema({
  name: {type: String, required: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;},
  organic: Boolean
}, {
  strict: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
}));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it might be populated with documents like organic frozen broccoli:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; broccoli = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Food({
  name: &lt;span class=&quot;string&quot;&gt;'frozen broccoli'&lt;/span&gt;,
  organic: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright, time to get rid of that &lt;code&gt;organic&lt;/code&gt; property.  Adding a property with Mongoose is as easy as declaring it in the schema.  Could removing be just as easy?&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;diff&quot;&gt;  var Food = db.model('Food', new mongoose.Schema({
    name: {type: String, required: true},
&lt;span class=&quot;deletion&quot;&gt;-   organic: Boolean&lt;/span&gt;
  }, {
    strict: true
  }));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we reload our broccoli doc, will mongoose strip out the undeclared properties?  We did tell Mongoose to be &lt;code&gt;strict&lt;/code&gt; with our &lt;code&gt;Food&lt;/code&gt;…&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Food.findById(broccoli, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err, broccoli) {
  console.log(broccoli.get(&lt;span class=&quot;string&quot;&gt;'organic'&lt;/span&gt;));
});

&amp;gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No.  Too slick.  I suppose it&amp;#39;s comforting that mongoose isn&amp;#39;t silently manipulating our docs.  Maybe we just need to re-save &lt;code&gt;broccoli&lt;/code&gt;.  Surely mongoose will be &lt;code&gt;strict&lt;/code&gt; now…&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;broccoli.save(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
  Food.findById(broccoli, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err, broccoli) {
    console.log(broccoli.get(&lt;span class=&quot;string&quot;&gt;'organic'&lt;/span&gt;))
  })
});

&amp;gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nope.  &lt;a href=&quot;http://grokbase.com/t/gg/mongoose-orm/123ya4qp0a/mongoose-removing-an-existing-field-from-a-collection#20120330swrofqtizat6i3kalhvfrusz5a&quot;&gt;Mr. Heckmann rationalizes this behavior&lt;/a&gt; as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mongoose &amp;quot;plays nice&amp;quot; with existing data in the db, not deleting it unless you tell it to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#39;ll have to be more explicit with this broccoli, more meticulous with my cleanup.  I&amp;#39;ll unset &lt;code&gt;organic&lt;/code&gt; directly.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;broccoli.set(&lt;span class=&quot;string&quot;&gt;'organic'&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;);
broccoli.save(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;() {
  Food.findById(broccoli, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err, broccoli) {
    console.log(broccoli.get(&lt;span class=&quot;string&quot;&gt;'organic'&lt;/span&gt;));
  });
});

&amp;gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wow.  Fine.  Now &lt;code&gt;strict&lt;/code&gt; decides to help out.&lt;/p&gt;
&lt;p&gt;Mongoose isn&amp;#39;t cooperating.  Time to talk directly to Mongo.  Maybe Mongoose can at least offer me some &lt;a href=&quot;http://mongoosejs.com/docs/api.html#model_Model-update&quot;&gt;update sugar&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Food.update({}, 
  {$unset: {organic: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}}, 
  {multi: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, safe: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}, 
  &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err) {
    Food.findById(broccoli, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err, broccoli) {
      console.log(broccoli.get(&lt;span class=&quot;string&quot;&gt;'organic'&lt;/span&gt;));
    });
  }
);

&amp;gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/images/yuno.jpg&quot; alt=&quot;Y U NO UNSET!?&quot;&gt;&lt;/p&gt;
&lt;p&gt;This must be &lt;code&gt;strict&lt;/code&gt; still &lt;a href=&quot;https://groups.google.com/d/topic/mongoose-orm/ypvL3Fximjc/discussion&quot;&gt;keeping us safe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Okay.  Last chance Mongoose.  Just give me the collection.&lt;/p&gt;
&lt;pre class=&quot;highlighted&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;Food.collection.update({}, 
  {$unset: {organic: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}}, 
  {multi: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, safe: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}, 
  &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err) {
    Food.findById(broccoli, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err, brocolli) {
      console.log(broccoli.get(&lt;span class=&quot;string&quot;&gt;'organic'&lt;/span&gt;));
  }
);

&amp;gt; &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew.  &lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a &lt;a href=&quot;https://gist.github.com/4008255&quot;&gt;Mocha spec&lt;/a&gt; reproducing this frustrating sequence.  How should we make it be better?&lt;/p&gt;

      </content>
    </entry>
  
    <entry>
      <title>Space Shoot 'em Up</title>
      <link href="http://hurrymaplelad.com/space-shootemup/"/>
      <updated>2003-10-01T00:00:00.000Z</updated>
      <id>http://hurrymaplelad.com/space-shootemup/</id>
      <content type="html">
        &lt;div id=&quot;flash&quot;&gt;&lt;/div&gt;

&lt;p&gt;
A dusty relic from the days rolling around in a creaky office chair on the red carpet of my old room.  My second game&lt;sup&gt;†&lt;/sup&gt;, and one of very few that have an end.  
&lt;/p&gt;

&lt;!-- more --&gt;
&lt;table class=&quot;controls&quot;&gt;
  &lt;caption&gt;Controls:&lt;/caption&gt;
  &lt;tr&gt;&lt;th&gt;Move:&lt;/th&gt;&lt;td&gt;&amp;larr; &amp;rarr;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;th&gt;Shoot:&lt;/th&gt;&lt;td&gt;Space&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;ul class=&quot;footnotes&quot;&gt;
&lt;sup&gt;†&lt;/sup&gt;&lt;small&gt;The first, Cow Hunter, I can't bring myself to put (back) on the internet.  It's out there somehere.  If you've dug this far into the dust bucket of the footnotes of the archives, you might be crazy enough to look :)&lt;/small&gt;
&lt;/ul&gt;
&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  swfobject.embedSWF(
    'https://rawgithub.com/hurrymaplelad/space-shootemup/master/space-shootemup.swf',
    'flash', 
    '550', '400', 
    '9.0.0'
  );
  window.onload = function() {
    document.getElementById('flash').focus();
  };
&lt;/script&gt;
      </content>
    </entry>
  
</feed>