<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[HurryMapleLad]]></title>
        <description><![CDATA[HurryMapleLad]]></description>
        <link>http://hurrymaplelad.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Wed, 01 Oct 2014 06:22:51 GMT</lastBuildDate>
        <atom:link href="http://hurrymaplelad.com/rss.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Adam Hull]]></author>
        <pubDate>Wed, 01 Oct 2014 06:22:47 GMT</pubDate>
        <item>
            <title><![CDATA[Speed up your Responsive App with Node and Varnish]]></title>
            <description><![CDATA[<p>Conversations about responsive design often focus on the browser: media queries, grids, and the like, but there&#39;s more!  Creating a great experience on all sorts of consumer-grade doo-dads demands some work on the server.</p>
<p>On Good Eggs, shoppers with full-sized computers don&#39;t want all their grocery aisles hidden behind a collapsible menu. The markup to generate the desktop navigation is different enough from the mobile navigation that using media queries would be a stretch (heh, get it?).  By trimming the more complicated desktop markup from the mobile response, we save precious page weight for a faster load time.</p>
<p>Let&#39;s take a journey along the request-response cycle to illustrate how we send different responses to different devices while maximizing cache hits:</p>
<p><img src="/images/speed-up-your-responsive-app-with-node-and-varnish/flow.jpg" alt="Flow Diagram">
<!-- more --></p>
<h2 id="request">Request</h2>
<p>Browsers send requests to a <a href="https://www.varnish-cache.org/">varnish</a> cache server (<a href="https://www.fastly.com/">Fastly</a> has worked great for us).  All requests come with a User-Agent header that hints at the shopper&#39;s device.</p>
<p>iPhone 5 sends something like:</p>
<pre class="highlight"><code class="vbnet">Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">5</span>_0 <span class="keyword">like</span> Mac OS X) AppleWebKit/<span class="number">534.46</span> (KHTML, <span class="keyword">like</span> Gecko) Version/<span class="number">5.1</span> Mobile/<span class="number">9</span>A334 Safari/<span class="number">7534.48</span><span class="number">.3</span></code></pre>
<p>while IE 11 on Windows 8 sends:</p>
<pre class="highlight"><code class="smalltalk"><span class="class">Mozilla</span>/<span class="number">5.0</span> (<span class="class">Windows</span> <span class="class">NT</span> <span class="number">6.3</span>; <span class="class">Trident</span>/<span class="number">7.0</span>; <span class="method">rv:</span><span class="number">11.0</span>) like <span class="class">Gecko</span></code></pre>
<p>which is <a href="http://blogs.msdn.com/b/ieinternals/archive/2013/09/21/internet-explorer-11-user-agent-string-ua-string-sniffing-compatibility-with-gecko-webkit.aspx">a deliberate lie</a> but gives us enough information to call it a desktop browser.</p>
<p>Grouping these messy headers into nice buckets of devices: <code>phone</code>, <code>tablet</code>, or <code>desktop</code> in our case, is the job of <a href="https://github.com/varnish/varnish-devicedetect">varnish-device-detect</a>.  To get up and running quickly, <a href="https://github.com/goodeggs/connect-devicedetect">connect-device-detect</a> can do the same grouping within the express server, but grouping at the edge cache yields much better hit rates.  Our express server only has to generate one <code>phone</code> response, which varnish will serve to iPhones, Androids, or any other devices who&#39;s User-Agent string matches our phone regular expressions.</p>
<p>Varnish sends the device bucket on to our Express server as an <code>X-UA-Device</code> header. In Express, we use <a href="https://github.com/goodeggs/connect-device-router">connect-device-router</a> to switch controllers per device:</p>
<pre class="highlight"><code class="javascript"><span class="keyword">var</span> express = require(<span class="string">'express'</span>),
    device = require(<span class="string">'connect-device-router'</span>);

express()
  .get(<span class="string">'/food'</span>,
    device(<span class="string">'phone'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res, next)</span> {</span>
      # ...
      res.render(<span class="string">'mobileView'</span>)
    }),
    device(<span class="string">'desktop'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res, next)</span> {</span>
      # ...
      res.render(<span class="string">'desktopView'</span>)
    }),
    <span class="function"><span class="keyword">function</span> <span class="params">(req, res, next)</span> {</span>
      # <span class="keyword">default</span>
    }
  )</code></pre>
<p>Matched routes also get a <code>req.device</code> string for branching within a template or a shared controller.</p>
<h2 id="response">Response</h2>
<p>Now our controller has generated a response, and we&#39;re on our way back out. Device router adds a <code>Vary: X-UA-Device</code> header only to matched routes, so routes that serve the same response to all devices will hit the same cache regardless of which device requests them.</p>
<p>Varnish includes the <code>Vary</code> header by default when calculating cache keys, so device router&#39;s <code>Vary: X-UA-Device</code> triggers separate cached responses per device bucket.</p>
<p>Our setup has a few customizations on top of varnish-devicedetect to support downstream caching, including adding a <code>Vary: User-Agent</code> header, since downstream caches won&#39;t have bucketed the device:</p>
<pre class="highlight"><code class="r">sub vcl_deliver {
  <span class="keyword">...</span>
  set resp.http.vary = resp.http.vary <span class="string">", User-Agent"</span>;

  <span class="comment"># We also remove the Vary: X-UA-Device set upstream by connect-device-router</span>
  set resp.http.vary = regsuball(resp.http.vary, <span class="string">"[, ]*?X-UA-Device"</span>, <span class="string">""</span>);

  <span class="comment"># And copy over the X-UA-Device bucket for easy auditing in browser</span>
  set resp.http.X-UA-Device = req.http.X-UA-Device;
  <span class="keyword">...</span>
}</code></pre>
<p>Now browsers can store the reponse locally, and won&#39;t need to make another request until their cached response is stale.</p>
<p>Caching can get a little mind bending.  I often found myself wondering why I couldn&#39;t just send <code>Vary: X-UA-Device</code> all the way back to the browser, I mean we&#39;re telling the browser what it&#39;s X-UA-Device is in the response, right?.  <a href="http://stackoverflow.com/questions/21056733/can-i-vary-on-a-custom-header">The answer</a> seems obvious in retrospect.  What else is confusing?</p>
]]></description>
            <link>http://hurrymaplelad.com/speed-up-your-responsive-app-with-node-and-varnish/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/speed-up-your-responsive-app-with-node-and-varnish/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Tue, 30 Sep 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Better Food System, Phone Sized]]></title>
            <description><![CDATA[<p>We built a mobile site at Good Eggs.  Check it out by visiting <a href="http://goodeggs.com">goodeggs.com</a> on your phone.  In case you&#39;re not on a phone now, it looks kinda like this:</p>
<p><img src="/images/mobile-screenshot.jpg" alt="Screenshot"></p>
<p>Hopefully we made it a little easier to buy food from foodmakers living their dreams.  We had a good time making it, and we&#39;re chronicling the process with a series of <a href="http://bites.goodeggs.com/posts/good-eggs-goes-mobile/">blog posts</a>.  Follow along for the full story.</p>
]]></description>
            <link>http://hurrymaplelad.com/a-better-food-system,-phone-sized/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/a-better-food-system,-phone-sized/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Sun, 04 May 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Gladstone and Disraeli]]></title>
            <description><![CDATA[<blockquote>
<p>When I dined with Mr. Gladstone, I felt as though he was the smartest
man in England. But when I dined with Mr. Disraeli, I felt as though
I was the smartest woman in England.</p>
</blockquote>
]]></description>
            <link>http://hurrymaplelad.com/gladstone-and-disraeli/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/gladstone-and-disraeli/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Wed, 12 Mar 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Automobile â™¡ Smartphone]]></title>
            <description><![CDATA[<p>Put an iPhone in the dash of an old Pathfinder on the cheap.</p>
<p><img src="/images/pathfinder/audio_schematic.thumb.jpg" alt="Audio wiring diagram">
Bless their hearts, auto-folks are trying to keep up with the tech world.  Lucklily, my 14 year old truck<sup>1</sup> was built before that started, so it was pretty easy to gut it&#39;s onboard entertainment and dock my phone instead.</p>
<p><sup>1 - Mechanics always call it a truck, whatever.</sup></p>
<!-- more -->

<p>I don&#39;t drive much.  Bikes are <a href="http://www.mrmoneymustache.com/2013/06/13/bicycling-the-safest-form-of-transportation/">way better</a>.  When I do drive, I&#39;m going far.  A good <a href="http://www.goodreads.com/hurrymaplelad">audio book</a> to helps me get lost.  A good <a href="https://itunes.apple.com/us/app/pocket-earth-offline-maps/id481679745?mt=8">offline GPS</a> helps me get really lost.  Any newish phone can do both with ease.</p>
<p><img src="/images/pathfinder/wrong.jpg" alt="wrong">
Getting a phone and an auto to cooperate has been a struggle for as long as I&#39;ve used either.  The phone has always been more technologically endowed, but autos refuse to play a support role.  They keep (up)selling drivers on integrated touch screens and bluetooth sync, inserting themselves between my phone and I. But their screens are dim and laggy.  Their bluetooth, flakey and battery draining.  An old fasioned cigarrette lighter charger and aux audio cable do better, if only they didn&#39;t leave the phone dangling by
tangly cord tethers.</p>
<p>For the Pathfinder, I cobbled together a satisfying combo of:
<img src="/images/pathfinder/finished.jpg" alt="finished"></p>
<ul>
<li><a href="http://amzn.com/B0066BWMNU">RAM X-Grip Phone Gripper</a> ($50) A little pricey, but it grips well and tolerates the future.</li>
<li><a href="http://amzn.com/B0002BEV84">ISO radio install kit</a> ($14) For a flat, in-dash base to suction the gripper to.  It baaaarely fits in the top slot.</li>
<li><a href="http://amzn.com/B0014JHVHQ">Hifonics 4-Band EQ</a> ($70) The iPhone dock cable spits out audio at line-level, so a volume knob is crucial.  My pathfinder has several amps near the speakers, so no amplification necessary at the stereo.</li>
</ul>
<p><div class="clear"/>
Wired together with:
<img src="/images/pathfinder/power.jpg" alt="usb power"></p>
<ul>
<li><a href="http://amzn.com/B00B7T0J9U">iPhone to USB and 3.5mm splitter</a> ($5) iPhone specific, but it&#39;s one clean cable.  Luckily the EQ has two inputs and 12V-to-USB has two outputs, so I tuck a spare micro-USB and 3.5mm in the dash in case other folks take the wheel.</li>
<li><a href="http://amzn.com/B0042B9U8Q">12V USB Adapter</a> ($3) I actually disconnected the 12V socket from the faceplate, then wrapped this whole connection in electrical tape and tucked it behind the scenes.</li>
<li><a href="http://amzn.com/B000I23TTE">3.5mm to RCA splitter</a> ($0.79) Connects phone audio cables to the EQ&#39;s inputs.</li>
<li><a href="http://amzn.com/B000UZ66YO">RCA Audio cables</a> ($3) Spliced these into the speaker lines to connect them to the EQ.</li>
</ul>
<p><img src="/images/pathfinder/connections.jpg" alt="wiring connections">
Now the phone is in charge.  The auto keeps it stable and powered, hides away the cords, and will happily support next year&#39;s model.  1 year in, nothing has melted yet.</p>
<div class="clear"/>]]></description>
            <link>http://hurrymaplelad.com/dashboard-iphone/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/dashboard-iphone/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Sun, 19 Jan 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[PG and the Epicureans]]></title>
            <description><![CDATA[<blockquote>
<p>Don&#39;t fear god, <br/>
Don&#39;t worry about death; <br/>
What is good is easy to get, and <br/>
What is terrible is easy to endure</p>
</blockquote>
<p class="by"><a href="http://en.wikipedia.org/wiki/Tetrapharmakos#The_four-part_cure">Epicurus, 3XX BC</a></p>

<blockquote>
<p>Don&#39;t ignore your dreams; <br/>
Don&#39;t work too much; <br/>
Say what you think; <br/>
Cultivate friendships; <br/>
Be happy</p>
</blockquote>
  <p class="by"><a href="http://www.paulgraham.com/todo.html">Paul Graham, 2012</a></p>

<p>Stoicism is making a bit of a comeback in tech circles.  Folks find
<!-- more -->
<a href="http://www.fourhourworkweek.com/blog/2009/04/13/stoicism-101-a-practical-guide-for-entrepreneurs/">stability</a> through the startup emotional rollercoaster and stop <a href="http://www.mrmoneymustache.com/2011/10/02/what-is-stoicism-and-how-can-it-turn-your-life-to-solid-gold/">spending money</a> on things they don&#39;t need so they can <a href="http://earlyretirementextreme.com/manifesto.html">live their dreams</a>.  Recommendations for <em>The Meditations of Marcus Aurelius</em> <a href="https://news.ycombinator.com/item?id=5160713">are</a> <a href="http://www.ryanholiday.net/reading-list/">everywhere</a>.</p>
<p>PG&#39;s <a href="http://www.paulgraham.com/todo.html">post</a>, inspired by a nurse who spent a lot of time with dying people, nailed a lingering doubt I had about tech&#39;s stoic obsession.  A city full of stoics would not be much fun.</p>
<p>San Francisco has taken a beating lately, and socially graceless, self-priotizing people are a <a href="http://whysfreallyisthatbad.com/postlude/">common criticism</a>.  Could stoicism worsen the problem by giving us philosophical justification for building up emotional walls, for focusing things within our control and neglecting our would-be friends?</p>
<p>Epicureanism, a rival school of Hellenistic Greek philosophy, has a different focus.  Something like:  friends are important;  treasure your relationships.  Money is <a href="http://www.newrepublic.com/article/114031/money-happiness-and-new-science-smarter-spending">well spent</a> on experiences that help them grow.  I like that.</p>
]]></description>
            <link>http://hurrymaplelad.com/pg-and-the-epicureans/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/pg-and-the-epicureans/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Mon, 02 Sep 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Fibrous on Harmony Generators? Impossible]]></title>
            <description><![CDATA[<p>A good Friday afternoon chat about asynchronous programming models left me wondering if the fibrous API could be implemented on top of <a href="http://wiki.ecmascript.org/doku.php?id=harmony:generators">ES6 generators</a>. Generators are baked in to Node 0.11, Chrome 19, and Firefox.  A port would be a big boost to interoperability.  <a href="https://github.com/google/traceur-compiler">Traceur</a> can even transform generator based code into a <a href="http://traceur-compiler.googlecode.com/git/demo/repl.html#function*%20test%20()%20%7B%0A%20%20yield%201%3B%0A%20%20var%20a%20%3D%20yield%202%3B%0A%20%20try%20%7B%0A%20%20%20%20yield%20a%3B%0A%20%20%7D%20catch%20(e)%20%7B%0A%20%20%20%20yield%2099%3B%0A%20%20%7D%0A%20%20for(var%20i%20%3D0%3B%20i%20%3C%201%3B%20i%2B%2B)%20%7B%0A%20%20%20%20yield%20123%3B%0A%20%20%7D%0A%7D%0A%0Afunction%20normal()%20%7B%0A%20%20var%20a%20%3D%20b%3B%0A%20%20return%20b%3B%0A%7D">giant state machine</a> that runs on all of today&#39;s environments.</p>
<p>At first the port looked promising. Wikipedia claimed that general coroutines could be <a href="http://en.wikipedia.org/wiki/Coroutine#Comparison_with_generators">built on generators</a>, and many folks have <a href="http://taskjs.org/">done</a> <a href="https://gist.github.com/creationix/5762837">just</a> <a href="https://gist.github.com/Benvie/5667557">that</a>.  After a little noodling I&#39;m pretty sure it can&#39;t be done.  In a Harmony environment a function can only suspend execution at <code>yield</code> expressions and <code>yield</code> expressions can only appear in generator functions. A yield expression cannot be wrapped up behind a fibrous <code>sync</code> or <code>wait</code>.</p>
<!-- more -->

<p>Let&#39;s say we&#39;ve got a fibrous function <code>f</code> that synchronously calls asychronous function <code>g</code>:</p>
<pre class="highlight"><code class="javascript"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    console.log(<span class="string">'g done'</span>);
    callback();
  }, <span class="number">1000</span>);
};

<span class="keyword">var</span> f = fibrous(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  g.sync();
  console.log(<span class="string">'f done'</span>);
};</code></pre>
<p>When we call <code>f</code> we wait one second, log <code>&#39;g done&#39;</code>, then log <code>&#39;f done&#39;</code>.  We need to halt <code>f</code> before the <code>console.log</code>, but <code>f</code> has no yield expressions.  It cannot be halted with any combination of ES6 generators.  Tough break.</p>
<hr>
<h3 id="related">Related</h3>
<ul>
<li><a href="http://taskjs.org/">Task.js</a> seems like a great way to get fibrous-like behavior within the generator constraints.  Still waiting on <a href="https://github.com/mozilla/task.js/issues/28">ES6 syntax support</a> and a <a href="https://github.com/mozilla/task.js/issues/17">CommonJS module published to NPM</a>.</li>
<li>Fellow coffee lovers, the proposed <a href="https://github.com/jashkenas/coffee-script/pull/3078">coffee script syntax for generators</a> is a &#39;lil fugly and worth checking out.</li>
</ul>
]]></description>
            <link>http://hurrymaplelad.com/fibrous-on-harmony-generators/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/fibrous-on-harmony-generators/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Sat, 17 Aug 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Ids in Mongoose, JSON, and Backbone]]></title>
            <description><![CDATA[<p>Mongoose adds <a href="http://mongoosejs.com/docs/guide.html#id">id sugar</a> on top the default _id document attribute.  Backbone has <a href="http://backbonejs.org/#Model-idAttribute">similar sugar</a>, but the types don&#39;t line up.  Pushing bits between the two with a customary JSON document adds a third representation.</p>
<p>If you find yourself typing <code>vegetable.id</code> when you really needed <code>new ObjectID(vegetable.toJSON()._id)</code> this fancy chart might help:
<!-- more --></p>
<table class="ids">
  <tr><th>Mongoose</th><th>id</th><th>_id</th></tr>
  <tr><td><a href="http://mongoosejs.com/docs/api.html#document_Document-id">document</a></td><td>String</td><td>ObjectID</td></tr>
  <tr><td><a href="http://mongoosejs.com/docs/api.html#query_Query-lean">lean document</a></td><td>âˆ…</td><td>ObjectID</td></tr>
  <tr><td><a href="http://mongoosejs.com/docs/api.html#document_Document-toJSON">document.toJSON()</a></td><td>âˆ…</td><td>ObjectID</td></tr>

  <tr><th>JSON</th><th></th><th></th></tr>
  <tr><td><a href="http://www.json.org/">object</a></td><td>âˆ…</td><td>String</td></tr>

  <tr><th>Backbone</th><th></th><th></th></tr>
  <tr><td><a href="http://backbonejs.org/#Model-id">model</td><td>String</td><td>âˆ…</td></tr>
  <tr><td><a href="http://backbonejs.org/#Model-get">model.get()</td><td>âˆ…</td><td>String</td></tr>
</table>]]></description>
            <link>http://hurrymaplelad.com/ids-in-mongoose-json-and-backbone/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/ids-in-mongoose-json-and-backbone/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Tue, 02 Apr 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Breakthrough a Day]]></title>
            <description><![CDATA[<blockquote>
<p>A breakthrough a day keeps the crisis at bay.</p>
<p><cite>E. F. Schumacher<br>
<a href="http://www.goodreads.com/book/show/1117634.Small_Is_Beautiful">Small is Beautiful</a></cite></p>
</blockquote>
]]></description>
            <link>http://hurrymaplelad.com/a-breakthrough-a-day/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/a-breakthrough-a-day/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Mon, 18 Feb 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Structuring Expressions in CoffeeScript]]></title>
            <description><![CDATA[<p>CoffeeScript can save as many keystrokes putting objects together as it can taking them apart.</p>
<p class="update">
  For a while I was calling this lexeme <em>restructuring assignment</em> until some on Stack Overflow <a href="http://stackoverflow.com/a/14822198/407845">pointed out that name was ridiculous</a>.  Now I&#39;ve taken to the name <em>structuring expressions</em>.
</p>

<!-- more -->

<p>Sure <a href="http://blog.carbonfive.com/2011/09/28/destructuring-assignment-in-coffeescript/">C5 told you all about</a> CoffeeScriptâ€™s <a href="http://coffeescript.org/#destructuring">destructing assignment</a> syntax for objectsâ€¦</p>
<p>How it can reach deep into nested structures</p>
<pre class="highlight"><code class="coffeescript">coffee&gt; user = <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>, <span class="attribute">address</span>: { <span class="attribute">city</span>: <span class="string">'Anytown'</span>, <span class="attribute">state</span>:
<span class="string">'AL'</span> }
{ <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>, <span class="attribute">address</span>: { <span class="attribute">city</span>: <span class="string">'Anytown'</span>, <span class="attribute">state</span>: <span class="string">'AL'</span> } }

coffee&gt; { <span class="attribute">address</span>: { city, state } } = user
{ <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>, <span class="attribute">address</span>: { <span class="attribute">city</span>: <span class="string">'Anytown'</span>, <span class="attribute">state</span>: <span class="string">'AL'</span> } }

coffee&gt; city
<span class="string">'Anytown'</span></code></pre>
<p>Or pluck apart function arguments</p>
<pre class="highlight"><code class="coffeescript"><span class="function"><span class="title">displayName</span> = <span class="params">({ name, age })</span> -&gt;</span>
  console.log <span class="string">"<span class="subst">#{name}</span>, <span class="subst">#{age}</span> year(s) old"</span>

coffee&gt; displayName <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>
Foo, <span class="number">42</span> year(s) old</code></pre>
<p>Or even destructure directly to instance attributes</p>
<pre class="highlight"><code class="coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">({ <span class="property">@name</span>, <span class="property">@age</span> })</span> -&gt;</span>

coffee&gt; <span class="keyword">new</span> User(<span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>)
{ <span class="attribute">name</span>: <span class="string">'foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> }</code></pre>
<p>But what does this do?</p>
<pre class="highlight"><code class="coffeescript">coffee&gt; age = <span class="number">42</span>
<span class="number">42</span>

coffee&gt; user = { <span class="string">'Foo'</span>, age }
?</code></pre>
<p>My fudge-fingers managed to mash that one unknowingly into my editor one day while attempting to rack up velocity points on the latest story. Instead of hemorrhaging the expected SyntaxError, it evaluated to this beautiful new object</p>
<pre class="highlight"><code class="coffeescript">{ <span class="attribute">Foo</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> }</code></pre>
<p>Now Iâ€™ve got a handy set syntax</p>
<pre class="highlight"><code class="coffeescript">coffee&gt; <span class="number">2</span> <span class="keyword">of</span> { <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span> }
<span class="literal">true</span>

coffee&gt; <span class="number">2</span> <span class="keyword">of</span> { <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> }
<span class="literal">false</span></code></pre>
<p>And with consistent variable naming, breezy data marshaling between some framework actors</p>
<pre class="highlight"><code class="coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">({ <span class="property">@name</span>, <span class="property">@age</span> })</span> -&gt;</span>

<span class="function"><span class="title">template</span> = <span class="params">({ user, face })</span> -&gt;</span>
  <span class="string">"&lt;div&gt;<span class="subst">#{user.name}</span> <span class="subst">#{face}</span>&lt;/div&gt;"</span>

<span class="class"><span class="keyword">class</span> <span class="title">UserView</span></span>
  <span class="attribute">constructor</span>: <span class="function"><span class="params">({ <span class="property">@user</span> })</span> -&gt;</span>

  <span class="attribute">render</span>:<span class="function"> -&gt;</span>
    <span class="property">@html</span> = template {
      <span class="property">@user</span>
      <span class="attribute">face</span>: <span class="string">':)'</span>
    }

coffee&gt; user = <span class="keyword">new</span> User(<span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span>)
{ <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> }

coffee&gt; view = <span class="keyword">new</span> UserView {user}
{ <span class="attribute">user</span>: { <span class="attribute">name</span>: <span class="string">'Foo'</span>, <span class="attribute">age</span>: <span class="number">42</span> } }

coffee&gt; view.render()
<span class="string">'&lt;div&gt;Foo :)&lt;/div&gt;'</span></code></pre>
]]></description>
            <link>http://hurrymaplelad.com/restructuring-assignment-in-coffeescript/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/restructuring-assignment-in-coffeescript/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Tue, 12 Feb 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Teacup Released]]></title>
            <description><![CDATA[<p><img src="https://raw.github.com/goodeggs/teacup/master/docs/teacup.jpg" alt="Teacup"></p>
<p>CoffeeScript templating from the Good Eggs labs:</p>
<ul>
<li><a href="http://bites.goodeggs.com/post/40042760798/teacup-coffeescript-templates-for-developer-happiness">Intro Post</a></li>
<li><a href="http://goodeggs.github.com/teacup/">Homepage</a></li>
<li><a href="http://github.com/goodeggs/teacup/">Source on Github</a></li>
</ul>
]]></description>
            <link>http://hurrymaplelad.com/teacup-released/</link>
            <guid isPermaLink="true">http://hurrymaplelad.com/teacup-released/</guid>
            <dc:creator><![CDATA[Adam Hull]]></dc:creator>
            <pubDate>Wed, 09 Jan 2013 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>